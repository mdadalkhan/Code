/* At the top level of your code */


@media screen and (min-width: 900px) {
  article {
    padding: 1rem 3rem;
  }
}

/* Nested within another conditional at-rule */
@supports (display: flex) {
  @media screen and (min-width: 900px) {
    article {
      display: flex;
    }
  }
}


/*
Description
Media types
Media types describe the general category of a device. Except when using the not or only logical operators, the media type is optional and the all type will be implied.

all
Suitable for all devices.
print
Intended for paged material and documents viewed on a screen in print preview mode. (Please see paged media for information about formatting issues that are specific to these formats.)
screen
Intended primarily for screens.
speech
Intended for speech synthesizers.*/



/* Accessibility concerns To best accommodate people who adjust a site's text
size, use ems when you need a <length> for your media queries.

Both em and px are valid units, but em works better if the user changes the
browser text size.

Also consider using Level 4 media queries to improve the user's experience.
For example, prefers-reduced-motion to detect if the user has requested that
the system minimize the amount of animation or motion it uses.*/


/* Security Because media queries provide insights into the capabilities—and
by extension, the features and design—of the device the user is working with,
there is the potential that they could be abused to construct a "fingerprint"
which identifies the device, or at least categorizes it to some degree of
detail that may be undesirable to users.

Because of this potential, a browser may opt to fudge the returned values in
some manner in order to prevent them from being used to precisely identify a
computer. A browser might also offer additional measures in this area; for
example, if Firefox's "Resist Fingerprinting" setting is enabled, many media
queries report default values rather than values representing the actual
device state.*/


@media print {
  body { font-size: 10pt; }
}

@media screen {
  body { font-size: 13px; }
}

@media screen, print {
  body { line-height: 1.2; }
}

@media only screen
  and (min-width: 320px)
  and (max-width: 480px)
  and (resolution: 150dpi) {
    body { line-height: 1.4; }
}






/*
Using media queries
Media queries are useful when you want to modify your site or app depending on a device's general type (such as print vs. screen) or specific characteristics and parameters (such as screen resolution or browser viewport width).

Media queries are used for the following:

To conditionally apply styles with the CSS @media and @import at-rules.
To target specific media for the <style>, <link>, <source>, and other HTML elements with the media= attribute.
To test and monitor media states using the Window.matchMedia() and MediaQueryList.addListener() JavaScript methods.
Note: The examples on this page use CSS's @media for illustrative purposes, but the basic syntax remains the same for all types of media queries.
 */


 /*
  Syntax
A media query is composed of an optional media type and any number of media feature expressions. Multiple queries can be combined in various ways by using logical operators. Media queries are case-insensitive.

A media query computes to true when the media type (if specified) matches the device on which a document is being displayed and all media feature expressions compute as true. Queries involving unknown media types are always false.
  */


/* Logical operators The logical operators not, and, and only can be used to
compose a complex media query. You can also combine multiple media queries
into a single rule by separating them with commas.

and The and operator is used for combining multiple media features together
into a single media query, requiring each chained feature to return true in
order for the query to be true. It is also used for joining media features
with media types.

not The not operator is used to negate a media query, returning true if the
query would otherwise return false. If present in a comma-separated list of
queries, it will only negate the specific query to which it is applied. If you
use the not operator, you must also specify a media type. */ 




/*
only
The only operator is used to apply a style only if an entire query matches, and is useful for preventing older browsers from applying selected styles. When not using only, older browsers would interpret the query screen and (max-width: 500px) as screen, ignoring the remainder of the query, and applying its styles on all screens. If you use the only operator, you must also specify a media type.

, (comma)
Commas are used to combine multiple media queries into a single rule. Each query in a comma-separated list is treated separately from the others. Thus, if any of the queries in a list is true, the entire media statement returns true. In other words, lists behave like a logical or operator. 
 */


/*
Targeting media features Media features describe the specific characteristics
of a given user agent, output device, or environment. For instance, you can
apply specific styles to widescreen monitors, computers that use mice, or to
devices that are being used in low-light conditions. This example applies
styles when the user's primary input mechanism (such as a mouse) can hover
over elements:*/



 @media (hover: hover) { ... }
/*

Many media features are range features, which means they can be prefixed with
"min-" or "max-" to express "minimum condition" or "maximum condition"
constraints. For example, this CSS will apply styles only if your browser's
viewport width is equal to or narrower than 12450px:*/

 @media (max-width: 12450px) { ... }

/*
If you create a media feature query without specifying a value, the nested
styles will be used as long as the feature's value is not zero (or none, in
Level 4). For example, this CSS will apply to any device with a color screen:*/


/*If a feature doesn't apply to the device on which the browser is running,
expressions involving that media feature are always false. For example, the
styles nested inside the following query will never be used, because no
speech-only device has a screen aspect ratio: */

@media speech and (aspect-ratio: 11/5) { ... }


/*Creating complex media queries Sometimes you may want to create a media
query that depends on multiple conditions. This is where the logical operators
come in: not, and, and only. Furthermore, you can combine multiple media
queries into a comma-separated list; this allows you to apply the same styles
in different situations.

In the previous example, we've already seen the and operator used to group a
media type with a media feature. The and operator can also combine multiple
media features into a single media query. The not operator, meanwhile, negates
a media query, basically reversing its normal meaning. The only operator
prevents older browsers from applying the styles.

Note: In most cases, the all media type is used by default when no other type
is specified. However, if you use the not or only operators, you must
explicitly specify a media type.*/

/*
Combining multiple types or features
The and keyword combines a media feature with a media type or other media features. This example combines two media features to restrict styles to landscape-oriented devices with a width of at least 30 ems:*/
/*

@media (min-width: 30em) and (orientation: landscape) { ... }

/*To limit the styles to devices with a screen, you can chain the media features to the screen media type:*/
/*/*/*/*
@media screen and (min-width: 30em) and (orientation: landscape) { ... }

Testing for multiple queries /*You can use a comma-separated list to apply
styles when the user's device matches any one of various media types,
features, or states. For instance, the following rule will apply its styles if
the user's device has either a minimum height of 680px or is a screen device
in portrait mode:*/

@media (min-height: 680px), screen and (orientation: portrait) { ... }

/*Taking the above example, if the user had a printer with a page height of
800px, the media statement would return true because the first query would
apply. Likewise, if the user were on a smartphone in portrait mode with a
viewport height of 480px, the second query would apply and the media statement
would still return true.

Inverting a query's meaning The not keyword inverts the meaning of an entire
media query. It will only negate the specific media query it is applied to.
(Thus, it will not apply to every media query in a comma-separated list of
media queries.) The not keyword can't be used to negate an individual feature
query, only an entire media query. The not is evaluated last in the following
query:

@media not all and (monochrome) { ... } Copy to Clipboard ... so that the
above query is evaluated like this:

@media not (all and (monochrome)) { ... } Copy to Clipboard ... rather than
like this:

@media (not all) and (monochrome) { ... } Copy to Clipboard As another
example, the following media query:

@media not screen and (color), print and (color) { ... } Copy to Clipboard ...
is evaluated like this:

@media (not (screen and (color))), print and (color) { ... } Copy to Clipboard
Improving compatibility with older browsers The only keyword prevents older
browsers that do not support media queries with media features from applying
the given styles. It has no effect on modern browsers.

@media only screen and (color) { ... } Copy to Clipboard Syntax improvements
in Level 4 The Media Queries Level 4 specification includes some syntax
improvements to make media queries using features that have a "range" type,
for example width or height, less verbose. Level 4 adds a range context for
writing such queries. For example, using the max- functionality for width we
might write the following:

Note: The Media Queries Level 4 specification has reasonable support in modern
browsers, but some media features are not well supported. See the @media
browser compatibility table for more details.

@media (max-width: 30em) { ... } Copy to Clipboard In Media Queries Level 4
this can be written as:

@media (width <= 30em) { ... } Copy to Clipboard Using min- and max- we might
test for a width between two values like so:

@media (min-width: 30em) and (max-width: 50em) { ... } Copy to Clipboard This
would convert to the Level 4 syntax as:

@media (30em <= width <= 50em ) { ... } Copy to Clipboard Media Queries Level
4 also adds ways to combine media queries using full boolean algebra with and,
not, and or.

Negating a feature with not Using not() around a media feature negates that
feature in the query. For example, not(hover) would match if the device had no
hover capability:

@media (not(hover)) { ... } Copy to Clipboard Testing for multiple features
with or You can use or to test for a match among more than one feature,
resolving to true if any of the features are true. For example, the following
query tests for devices that have a monochrome display or hover capability:

@media (not (color)) or (hover) { ... }*/*/*/*/*/*/